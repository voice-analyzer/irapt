var searchIndex = JSON.parse('{\
"irapt":{"doc":"<code>irapt</code> is an implementation of the IRAPT pitch estimation …","t":[18,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,12,11,0,11,11,11,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,11,11,11,11,11,11,11,11,11,11,11,12],"n":["DEFAULT","EstimatedPitch","EstimatedPitchIter","Irapt","Output","Parameters","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","candidate_generator_fft_len","candidate_max_jump","candidate_selection_window_duration","candidate_step_decay","candidate_taper","clone","clone","clone","clone_into","clone_into","clone_into","default","energy","eq","error","final_estimate","fmt","fmt","frequency","from","from","from","from","from","half_interpolation_window_len","harmonics_estimation_interval","harmonics_estimation_window_duration","interpolation_factor","into","into","into","into","into","into_iter","more_output","ne","new","next","offset","parameters","pitch_estimates","pitch_range","process","reset","sample_rate","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","InterpolationWindowTooLong","InvalidParameterError","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","max_length"],"q":["irapt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","irapt::error","","","","","","","","","","","","","irapt::error::InvalidParameterError"],"d":["Suggested default parameters.","An estimate of the pitch in the input at a specific sample …","An iterator over pitches estimated over time in the input, …","Implementation of the IRAPT pitch estimation algorithm.","The output of <code>Irapt::process</code>.","Various tunable parameters for <code>Irapt</code>.","","","","","","","","","","","Size of the FFT used for candidate generation.","Assumed maximum distance a valid pitch will change within …","Duration, in seconds, of the sliding window upon which …","Decay factor applied to candidates at each time step …","Taper factor applied to candidates within a time step.","","","","","","","","Arbitrary measure, from <code>0.0..</code>, of the energy associated …","","Error types returned by <code>irapt</code>.","Returns a final pitch estimate for the given input, at a …","","","Frequency, in Hz, of the estimated pitch.","","","","","","Half-length of the window of the interpolator used on …","Interval, in seconds, at which harmonics of the input are …","Duration, in seconds, of the sliding window upon which …","Number of pitch candidates to interpolate in between each …","","","","","","","Returns whether further output can be produced given the …","","Constructs a new <code>Irapt</code>.","","The offset in samples within the input buffer (<em>before</em> …","Returns the <code>Parameters</code> specified during construction.","Returns all pitch estimates for the given input, including …","Frequency range, in Hz, within which to detect pitch.","Process input from a queue of samples in a <code>VecDeque</code>.","Resets all internal state associated with the sliding …","The constant sample rate, in Hz, the input was sampled …","","","","","","","","","","","","","","","","","","","","The supplied <code>half_interploation_window_len</code> is too large …","An error returned when the supplied <code>Parameters</code> are invalid …","","","","","","","","","","","","The maximum allowable length of …"],"i":[1,0,0,0,0,0,2,3,1,4,5,2,3,1,4,5,1,1,1,1,1,1,4,5,1,4,5,1,4,4,0,5,1,4,4,2,3,1,4,5,1,1,1,1,2,3,1,4,5,5,3,4,2,5,4,2,3,1,2,2,1,5,1,4,5,2,3,1,4,5,2,3,1,4,5,2,3,1,4,5,6,0,6,6,6,6,6,6,6,6,6,6,6,7],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[],["parameters",3]],[[],["estimatedpitch",3]],[[],["estimatedpitchiter",3]],[[]],[[]],[[]],[[]],null,[[["estimatedpitch",3]],["bool",15]],null,[[],["estimatedpitch",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["estimatedpitch",3]],["bool",15]],[[["parameters",3]],[["invalidparametererror",4],["result",4,["invalidparametererror"]]]],[[],["option",4]],null,[[],["parameters",3]],[[],["estimatedpitchiter",3]],null,[[["vecdeque",3]],[["output",3],["option",4,["output"]]]],[[]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["invalidparametererror",4]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"Parameters"],[3,"Irapt"],[3,"Output"],[3,"EstimatedPitch"],[3,"EstimatedPitchIter"],[4,"InvalidParameterError"],[13,"InterpolationWindowTooLong"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};